{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","goods","visibleGoods","console","log","getReorderedGoods","shouldResetBeShown","ALPHABET","LENGTH","isAlphabeticallySorted","isSortedByLength","sort","firstGood","secondGood","localeCompare","length","reverse","className","type","classNames","onClick","state","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuBE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EAjCD,SACLA,EADK,GAGJ,IADCF,EACF,EADEA,SAAUH,EACZ,EADYA,WAENM,EAAY,YAAOD,GAKzB,OAFAE,QAAQC,IAAIL,EAAUH,GAEfM,EAwBOG,CAAkBZ,EAAiB,CAAEM,WAAUH,eAEvDU,EAAqBP,IAAaP,EAASe,UAC5CR,IAAaP,EAASgB,QACtBZ,EACCa,EAAyBV,IAAaP,EAASe,SAC/CG,EAAmBX,IAAaP,EAASgB,OAsB/C,OApBAP,EAAMU,MAAK,SAACC,EAAWC,GACrB,OAAQd,GACN,KAAKP,EAASM,KACZ,OAAO,EAET,KAAKN,EAASe,SACZ,OAAOK,EAAUE,cAAcD,GAEjC,KAAKrB,EAASgB,OACZ,OAAOI,EAAUG,OAASF,EAAWE,OAEvC,QACE,OAAO,MAITnB,GACFK,EAAMe,UAIN,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,YAAaV,IAEfW,QArDmB,WACzBpB,EAAYR,EAASe,WA+CjB,iCAUA,wBACEW,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAAaT,IAEfU,QA3Da,WACnBpB,EAAYR,EAASgB,SAqDjB,4BAUA,wBACEU,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAAavB,IAEfwB,QAjEQ,WACdvB,GAAc,SAAAwB,GAAK,OAAKA,MA2DpB,qBAUCf,GACC,wBACEY,KAAK,SACLD,UAAU,4BACVG,QAtEI,WACZvB,GAAc,GACdG,EAAYR,EAASM,OAiEf,sBAWJ,6BACGG,EAAMqB,KAAI,SAACC,GAAD,OACT,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCtIlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.732d36b3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const sortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverse = () => {\n    setIsReversed(state => !state);\n  };\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  const shouldResetBeShown = sortType === SortType.ALPHABET\n    || sortType === SortType.LENGTH\n    || isReversed;\n  const isAlphabeticallySorted = sortType === SortType.ALPHABET;\n  const isSortedByLength = sortType === SortType.LENGTH;\n\n  goods.sort((firstGood, secondGood) => {\n    switch (sortType) {\n      case SortType.NONE:\n        return 0;\n\n      case SortType.ALPHABET:\n        return firstGood.localeCompare(secondGood);\n\n      case SortType.LENGTH:\n        return firstGood.length - secondGood.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    goods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': !isAlphabeticallySorted,\n          })}\n          onClick={sortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-success', {\n            'is-light': !isSortedByLength,\n          })}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {shouldResetBeShown && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {goods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}